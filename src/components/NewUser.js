import React from "react";
import axios from "axios";
import { navigate } from "@reach/router";
import Error from "./Error";
import "../styles.css";

class NewUser extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: "",
      email: "",
      errors: {
        name: null,
        email: null,
      },
    };
  }

  /* Thw `newUserId` function was created because the `"id"` generated by the json server is a generated hash, 
  and this function will overwrite the generated hash 
  and be consistent with the test data provided in the `db.json` file 
  which are number strings that increment starting at `"1"`.
  */
  newUserId = () => `${this.props.usersCount + 1}`;

  postUserHandler = async () => {
    const inputName = this.state.name;
    const inputEmail = this.state.email;
    const validated = this.validated(inputName, inputEmail);

    if (!validated) {
      console.log("VALIDATION ERROR: ", this.state.errors);
    } else {
      try {
        const user = {
          id: this.newUserId(),
          name: inputName,
          email: inputEmail,
        };

        await axios.post("/users", user);
        navigate("/");
      } catch (error) {
        console.error(error);
      }
    }
  };

  validationError = (type, message) => {
    const { errors } = { ...this.state };
    const updatedErrors = errors;
    updatedErrors[type] = message;
    this.setState({ errors: updatedErrors });
  };

  validated = (inputName, inputEmail) => {
    if (inputName && inputEmail) return true;

    // Clear previous validation errors
    this.validationError("name", null);
    this.validationError("email", null);

    if (!inputName) this.validationError("name", "You must enter a name");
    if (!inputEmail)
      this.validationError("email", "You must enter an email address");

    return false;
  };

  handleNameChange = (event) => this.setState({ name: event.target.value });
  handleEmailChange = (event) => this.setState({ email: event.target.value });

  render() {
    return (
      <div className="Users">
        <h1>Create New User</h1>
        <form
          onSubmit={(event) => {
            event.preventDefault();
            this.postUserHandler();
          }}
          className="card"
        >
          <label htmlFor="name">Name</label>
          <input
            type="text"
            value={this.state.name}
            onChange={this.handleNameChange}
          />
          <br />
          <label htmlFor="email">Email</label>
          <input
            type="text"
            value={this.state.email}
            onChange={this.handleEmailChange}
          />
          <br />
          <button type="submit">Add User</button>
        </form>
      </div>
    );
  }
}

export default NewUser;
