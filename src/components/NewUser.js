import React from "react";
import axios from "axios";
import { navigate } from "@reach/router";
import "../styles.css";

const inputStatus = {
  ERROR: "ERROR",
  OK: "OK",
  IDLE: "IDLE",
};

const submissionStatus = {
  COMPLETE: "COMPLETE",
  INCOMPLETE: "INCOMPLETE",
};

class NewUser extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: "",
      email: "",
      nameStatus: inputStatus.IDLE,
      emailStatus: inputStatus.IDLE,
      userSubmissionStatus: submissionStatus.INCOMPLETE,
    };
  }

  submitForm = async () => {
    try {
      const user = {
        id: this.newUserId(),
        name: this.state.name,
        email: this.state.email,
      };

      await axios.post("/users", user);
      this.setState({ userSubmissionStatus: submissionStatus.COMPLETE });
      console.log("COMPLETE");
    } catch (error) {
      console.error(error);
    }
  };

  /* The `newUserId` function was created because the `"id"` generated by the json server is a generated hash, 
  and this function will overwrite the generated hash 
  and be consistent with the test data provided in the `db.json` file 
  which are number strings that increment starting at `"1"`.
  */
  newUserId = () => `${this.props.usersCount + 1}`;

  isValid = (inputName, inputEmail) => {
    const validate = () => {
      !inputName
        ? this.setState({ nameStatus: inputStatus.ERROR })
        : this.setState({ nameStatus: inputStatus.OK });
      !inputEmail
        ? this.setState({ emailStatus: inputStatus.ERROR })
        : this.setState({ emailStatus: inputStatus.OK });
    };

    validate();

    return inputName && inputEmail ? true : false;
  };

  submitHandler = (event) => {
    event.preventDefault();
    this.postUserHandler();
  };

  postUserHandler = () => {
    const isValid = this.isValid(this.state.name, this.state.email);

    if (isValid) {
      this.submitForm();
    }
  };

  handleInputChange = (inputType, event) => {
    if (this.state[inputType + "Status"] !== inputStatus.IDLE) {
      this.setState({ [inputType + "Status"]: inputStatus.IDLE });
    }
    this.setState({ [inputType]: event.target.value });
  };

  render() {
    const {
      name,
      email,
      nameStatus,
      emailStatus,
      userSubmissionStatus,
    } = this.state;

    const okOrError = (status, inputType) => {
      const errorMessage =
        inputType === "name"
          ? "You must enter a name"
          : "You must enter an email address";

      if (status === inputStatus.OK) {
        return (
          <React.Fragment>
            <br />
            <label htmlFor={`${inputType}Success`} className="Success">
              <strong>Ok</strong>
            </label>
            <br />
          </React.Fragment>
        );
      } else {
        return (
          <React.Fragment>
            <br />
            <label htmlFor={`${inputType}Error`} className="Error">
              <strong>Error: </strong>
              {errorMessage}
            </label>
            <br />
          </React.Fragment>
        );
      }
    };

    const createNewUserForm = (
      <div className="Users">
        <h1>Create New User</h1>
        <form
          onSubmit={(event) => {
            this.submitHandler(event);
          }}
          className="card"
        >
          <label htmlFor="name">Name</label>
          <input
            type="text"
            value={name}
            onChange={(event) => this.handleInputChange("name", event)}
          />
          {nameStatus === inputStatus.IDLE
            ? null
            : okOrError(nameStatus, "name")}
          <label htmlFor="email">Email</label>
          <input
            type="text"
            value={email}
            onChange={(event) => this.handleInputChange("email", event)}
          />
          {emailStatus === inputStatus.IDLE
            ? null
            : okOrError(emailStatus, "email")}
          <br />
          <button
            type="submit"
            onSubmit={(event) => {
              this.submitHandler(event);
            }}
          >
            Submit
          </button>
        </form>
      </div>
    );

    const userCreatedSuccess = (
      <div className="Users">
        <h1>User was created!</h1>
        <div className="card">
          <p>Click to return home.</p>
          <button type="navigate" onClick={() => navigate("/")}>
            Return
          </button>
        </div>
      </div>
    );

    return userSubmissionStatus === submissionStatus.COMPLETE
      ? userCreatedSuccess
      : createNewUserForm;
  }
}

export default NewUser;
